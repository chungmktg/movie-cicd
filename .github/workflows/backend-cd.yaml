# Name of the GitHub Actions workflow
name: 'Backend CD'

# Define events that trigger the workflow
on:
  workflow_dispatch:  # Allows manual triggering of the workflow

  pull_request:  # Triggers the workflow on pull requests to the main branch
    branches:
      - main

# Define jobs to be run in the workflow
jobs:
  cd-lint-job:
    name: 'Check Lint job'  # Linting job to check code quality
    runs-on: ubuntu-latest  # Specifies the runner environment

    steps:
      - name: checkout code  # Step to check out the code from the repository
        uses: actions/checkout@v3

      - name: Set up Python  # Step to set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Restore cache  # Step to restore npm cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install dependencies  # Step to install Python dependencies
        run: |
          cd ./starter/backend
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install pytest --dev
          pipenv install --dev
      
      - name: Run lint check  # Step to run lint check using pipenv
        run: cd ./starter/backend && pipenv run lint

  cd-test-job:
    name: 'Test Job'  # Testing job to run tests
    runs-on: ubuntu-latest  # Specifies the runner environment

    steps:
      - name: checkout code  # Step to check out the code from the repository
        uses: actions/checkout@v3

      - name: Set up Python  # Step to set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Restore cache  # Step to restore npm cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install dependencies  # Step to install Python dependencies
        run: |
          cd ./starter/backend
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install pytest --dev
          pipenv install --dev

      - name: Run tests  # Step to run tests using pipenv
        run: |
          cd ./starter/backend 
          pipenv run test

  build:
    needs: [cd-lint-job, cd-test-job]  # Specifies dependencies on lint-job and test-job
    runs-on: ubuntu-latest  # Specifies the runner environment

    steps:
      - name: checkout code  # Step to check out the code from the repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials  # Step to configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: ECR Login  # Step to login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build Docker image  # Step to build the Docker image
        run: |
          cd ./starter/backend
          docker build -t backend .
      
      - name: Tag Docker Image  # Step to tag the Docker image
        run: |
          cd ./starter/backend
          docker tag backend:latest 155614359981.dkr.ecr.us-east-1.amazonaws.com/backend:latest

      - name: Push Docker image to ECR  # Step to push the Docker image to ECR
        run: |
          cd ./starter/backend
          docker push 155614359981.dkr.ecr.us-east-1.amazonaws.com/backend:latest
      
      - name: Kubeconfig Auth  # Step to authenticate with Kubernetes cluster
        run: |
          aws eks update-kubeconfig --name cluster --region us-east-1

      - name: Deploy to Kubernetes  # Step to deploy Docker image to Kubernetes
        run: |
          cd ./starter/backend/k8s
          kustomize edit set image backend=155614359981.dkr.ecr.us-east-1.amazonaws.com/backend:latest
          kustomize build | kubectl apply -f -
